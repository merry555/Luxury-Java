/*
 *  < method : 함수 == 기능 >
 *  : 특정한 목적(기능)을 수행하기 위한 코드들의 집합
 *  : 기계로 비유할 수 있다.
 *  ** 기계의 input : 재료(준비물)
 *  ** 기계의 output : 결과물
 *  
 *  ** 메소드의 input : 재료 => 인자, parameter 
 *  ** 메소드의 output : 리턴값 (결과값)
 *  
 *  < 메소드 정의 : 기계 만들기 >
 *  - 클래스 내부에 정의해야 한다. 
 *  - 메인메소드가 정의된 클래스 안에 해당 메소드를 정의할 경우,
 *    해당 메소드 맨 앞에 static 키워드를 써줘야한다.  
 *  
 *  형식 : (static) 리턴자료형 메소드명 (매개변수선언){
 *  	실행문장1;
 *  	실행문장2;
 *  	...
 *  	return 리턴값;
 *  }
 *  
 *  1. 리턴자료형 : 
 *  	- 메소드가 목표로하는 최종적인 결과물(리턴값)의 자료형
 *  	- 리턴자료형은 마지막에 결정해주자!
 *  	- void : 리턴값이 없다는 의미
 *  	- 하나의 메소드는 둘 이상의 자료형 데이터를 리턴할 수 없다.
 *  2. 메소드명 : 기능을 대표하는 단어들로 써주자!
 *  	- 권고사항 : 띄어쓰기대신 단어들의 맨 앞글자를 대문자
 *  				맨 처음 글자는 소문자로
 *  		ex) my first method => myFirstMethod
 *  3. 매개변수 선언 
 *  	- 매개변수? : 재료가 들어올 통로 역할
 *  	- 매개변수는 소괄호 내부에 선언
 *  	- 재료의 형식과 개수에 맞게 선언
 *  	- 매개변수는 선언 시, ';' 넣지 않는다.
 *  4. return 키워드 : 
 *  	1) 메소드를 종료하라 
 *  	2) (리턴값이 있다면) 리턴값을 반환하라 (호출되었던 곳으로)
 *  	3) 돌아가라 (호출되었던 곳으로)
 *  
 *  5. 리턴값 : 메소드가 목적하는 결과물(값)
 *  	- 메소드 1번 실행 당 1개의 리턴값을 반환받는다.
 *  		=> 2개 이상의 리턴값을 만들어 낼 수 없다.
 *  < 메소드 호출 : 기계 사용(실행)하기 >
 *  	형식 : 메소드명 (인자값1, 인자값2,..);
 *  - 메인메소드 안에 써주자!
 */


public class _03_Method {

//	덧셈 기능을 가진 메소드를 정의 ( 기계 만들기 )
	static int add(int a, int b){
		int sum = a+b;
		return sum;
	}
	
//	"*****" 출력하는 메소드르 정의 
	static void printStar(){
		System.out.println("*****");
		return;
	}
	
	
	public static void main(String[] args) {
		add(10,20);
		printStar();
	}
	
	
}










