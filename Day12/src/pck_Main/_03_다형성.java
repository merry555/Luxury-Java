package pck_Main;
/*
 * < 다형성 : polymorphism >
 *  - 형태를 바꿀 수 있다
 *  - 마우스 커서를 생각하자
 *  	메모장 클릭 -> 메모장 사용
 *  	인터넷 클릭 -> 인터넷 사용
 *  - 레퍼런스 변수에 어떤 클래스가 들어가는지에 따라서,
 *    해당 클래스를 사용할 수 있는 것
 */
import pck_Src.*;
public class _03_다형성 {

public static void main(String[] args) {
Tank t = new Tank();
Airplane a = new Airplane();
a.show();
System.out.println(a.missil);


//		마우스 역할인 u는 tank를 다루고 싶다.
Unit u = new Tank();
u.go();

//		이번에는 전투기를 다루고 싶다
u = new Airplane();
u.go();
//		에러 : u.show();
//		에러 : System.out.println(u.missil);
}
//	결론 :
//	다형성의 한계는,
//	부모클래스타입의 레퍼런스로 자식 클래스에 접근할 경우,
//	자식클래스의 고유멤버/메소드는 접근할 수 없다.
//	오버라이딩한 메소드를 실행하고 싶을 때 주로 사용

//	< 다형성이 유지보수에 효과적인 이유 >
//	- 기존 클래스로 프로그램을 작성했다가, 이후에 자잘한 기능을 수정해야 하는 상황에서,
//	  클래스 자체를 변경하는게 아니라 <- 유지보수 힘듬
//	  이 클래스를 상속 받아 새 클래스 작성
//	  레퍼런스 타입은 이전 클래스 타입 그대로 두고, 객체만 새 클래스로 변경해주면
//	  기존 코드들은 거의 수정할 필요 없고, 몇가지 새로운 코드만 추가하면 된다.
//	- 수정 가능성이 있는 클래스는 애초에 다형성을 염두해두고 코드를 작성한다.
	
	
}


















